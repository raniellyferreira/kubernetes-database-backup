#!/bin/bash -e

BACKUP_PATH="/backup/auto"
TEMP_DIR="/backup/tmp"
TIMESTAMP=$(date +%F-%H%M)
TAR_FILE="mongodb-${TIMESTAMP}.tar.gz"
REPORT_SUCCESSFULLY=${REPORT_SUCCESSFULLY:-"0"}
FAST_COMPRESSION=${FAST_COMPRESSION:-"1"}
S3_BUCKET_BACKUP=${S3_BUCKET_BACKUP:-"backups"}

AWS_S3_ADDON_PARAMS=()
if [ -n "$AWS_ENDPOINT_OVERRIDE" ]; then
    AWS_S3_ADDON_PARAMS+=(--endpoint-url="$AWS_ENDPOINT_OVERRIDE")
fi

ROTATE_ARGS=${MONGODB_ROTATE_ARGS:-$ROTATE_ARGS}
MONGODB_S3_BUCKET_PATH=${MONGODB_S3_BUCKET_PATH:-${S3_MONGODB_BUCKET_PATH:-"mongodb"}}

MONGODB_URI=${MONGODB_URI:-}
MONGODB_AUTH_DB=${MONGODB_AUTH_DB:-"admin"}
MONGODB_USERNAME=${MONGODB_USERNAME:-"root"}
MONGODB_PASSWORD=${MONGODB_PASSWORD:-}
MONGODB_HOST=${MONGODB_HOST:-"localhost"}
MONGODB_PORT=${MONGODB_PORT:-"27017"}

do_log() {
    echo $(date +"[ %d/%m/%Y - %H:%M:%S ] #")" $@"
}

notify_dev() {
    # Adicione aqui uma forma de notificação quando o backup for concluido ou tiver erro
    if [ -n "$NTFY_ENDPOINT" ] && [ -n "$NTFY_TOKEN" ]; then
        curl --fail --silent --request POST $NTFY_ENDPOINT \
            --header "x-api-key: ${NTFY_TOKEN}" \
            --header 'Content-Type: application/json' \
            --data-raw "{\"subject\": \"${1}\",\"message\": \"${2}\",\"topic\":\"mail\"}"
    fi
}

do_log "Starting backup mongodb..."

# Create a backup dir
mkdir -p $TEMP_DIR
mkdir -p $BACKUP_PATH
cd $BACKUP_PATH

# Erase backup dir before backup start
do_log "Cleanup old backup $BACKUP_PATH"
rm -vrf $BACKUP_PATH/*

# Mongodump para exportar a database
if [[ $MONGODB_URI ]]; then
    mongodump --uri="$MONGODB_URI" --out=$BACKUP_PATH
else
    mongodump --host=$MONGODB_HOST --port=$MONGODB_PORT --username=$MONGODB_USERNAME --password=$MONGODB_PASSWORD --authenticationDatabase=$MONGODB_AUTH_DB --out=$BACKUP_PATH
fi

if [[ $? != 0 ]]; then
    do_log "ERROR backup"
    do_log "Dumping of mongo database failed"
    do_log "Cleanup old backup $BACKUP_PATH"

    notify_dev "Warning MongoDB Backup $TIMESTAMP" "MongoDB Backup: ERROR on export data"
    rm -rf $BACKUP_PATH/*
    exit 1
fi

do_log "Compressing backup..."
if [[ $FAST_COMPRESSION == "1" ]]; then
    tar -vczf $TEMP_DIR/${TAR_FILE} -C ${BACKUP_PATH} ${BACKUP_PATH}
else
    tar -vcjf $TEMP_DIR/${TAR_FILE} -C ${BACKUP_PATH} ${BACKUP_PATH}
fi

TAR_SIZE=$(du -hs $TEMP_DIR/$TAR_FILE | awk '{print $1}')

du -hs $BACKUP_PATH
du -hs $TEMP_DIR/$TAR_FILE

do_log "Cleanup backup path $BACKUP_PATH"
rm -vrf $BACKUP_PATH/*

# Upload to S3
do_log "Upload file on s3 s3://$S3_BUCKET_BACKUP/$MONGODB_S3_BUCKET_PATH/$TAR_FILE"
aws s3 "${AWS_S3_ADDON_PARAMS[@]}" cp $TEMP_DIR/$TAR_FILE  s3://$S3_BUCKET_BACKUP/$MONGODB_S3_BUCKET_PATH/$TAR_FILE

UPLOAD_STATUS=$?

do_log "Remove tar file"
rm -f $TEMP_DIR/$TAR_FILE

FINISH_DATE=$(date +%F-%H%M)

if [[ $UPLOAD_STATUS != 0 ]]; then
    do_log "ERROR Upload tar $TEMP_DIR/$TAR_FILE on s3 fail"
    notify_dev "Warning MongoDB Backup $FINISH_DATE" "MongoDB Backup: ERROR Upload tar $TEMP_DIR/$TAR_FILE to S3"
    exit 1  
fi

if [[ $ROTATE_ARGS ]]; then
    do_log "Rotating backups..."
    rotate s3://$S3_BUCKET_BACKUP/$MONGODB_S3_BUCKET_PATH $ROTATE_ARGS
fi

do_log "MongoDB Backup finished successfully with $TAR_SIZE"

if [[ $REPORT_SUCCESSFULLY == "1" ]]; then
    notify_dev "MongoDB Backup $FINISH_DATE" "MongoDB Backup finished successfully with $TAR_SIZE s3://$S3_BUCKET_BACKUP/$MONGODB_S3_BUCKET_PATH/$TAR_FILE"
fi

exit 0
